/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Other/File.java to edit this template
 */
package org.centrale.objet.WoE;

import org.centrale.objet.WoE.Creature.*;
import org.centrale.objet.WoE.Objet.*;
import java.util.Random;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;


/**
 *
 * @author inky19
 */
public class World {

    /**
     * Objets sur la carte
     */
    /**
     * Liste des entit√©s
     */
    public List<Entite> entites;
    /**
     * Matrice des cr√©atures pour un acc√®s rapide √† partir d'une position
     */
    public Entite[][] mapEntites;// Matrice des entit√©s √† leur position
    
    /**
     * Matrice des objets pour un acc√®s rapide √† partir d'une position
     */
    public Objet[][] mapObjets;
    /**
     * Taille du monde.
     */
<<<<<<< HEAD
    public final int SIZE = 32; 
    
=======
    public final int SIZE = 15;

>>>>>>> main
    /**
     * Liste des objets sur la carte. (Doit √™tre remplac√©e √† terme)
     */
    private ArrayList<Objet> ObjetsMap;

    /**
     * Reste l√† car devenu la mascotte du d√©bogage üê∫
     */
    public Loup wolfie;

    public World() {
        entites = new LinkedList<>();
        mapEntites = new Entite[SIZE][SIZE];
        mapObjets = new Objet[SIZE][SIZE];
        
        wolfie = new Loup();
        //mapCreatures[0][0] = wolfie;

    }

    /**
     * Cr√©e un monde avec des positions de d√©part al√©atoires et distinctes
     */
    public void creerMondeAlea() {

        // G√©n√©rateur de nombre al√©atoire
        Random alea = new Random();
        int rand;

        // G√©n√©ration d'un nombre de cr√©atures al√©atoires
        rand = alea.nextInt(10);
        System.out.println("Nb Archer :" + rand);
        for (int i = 0; i < rand; i++) {
            entites.add(new Archer());
        }
        rand = alea.nextInt(10);
        System.out.println("Nb Paysan :" + rand);
        for (int i = 0; i < rand; i++) {
            entites.add(new Paysan());
        }

        rand = alea.nextInt(10);
        System.out.println("Nb Lapin :" + rand);
        for (int i = 0; i < rand; i++) {
            entites.add(new Lapin());
        }

        rand = alea.nextInt(10);
        System.out.println("Nb Guerrier :" + rand);
        for (int i = 0; i < rand; i++) {
            entites.add(new Guerrier());
        }
        rand = alea.nextInt(10);
        System.out.println("Nb Loup :" + rand);
        for (int i = 0; i < rand; i++) {
            entites.add(new Loup());
        }
        
        rand = alea.nextInt(10);
        System.out.println("Nb Potion de soin :" + rand);
        for (int i = 0; i < rand; i++) {
            entites.add(new PotionSoin());
        }
    
        System.out.println("Nb total de personnage : " + entites.size());
        // Placement al√©atoire des entit√©s
        boolean notValide;
        for (Entite p : entites) {
            notValide = true;
            while (notValide) {
                // Tirage d'une position al√©atoire sur la carte
                int x = alea.nextInt(SIZE);
                int y = alea.nextInt(SIZE);
                // V√©rification que la case est libre
                if ((p instanceof Creature)&&(mapEntites[x][y] == null)) {
                    p.setPos(new Point2D(x, y));
                    mapEntites[x][y] = (Creature) p;
                    notValide = false;
                }
                if ((p instanceof Objet)&&(mapObjets[x][y] == null)) {
                    p.setPos(new Point2D(x, y));
                    mapObjets[x][y] = (Objet) p;
                    notValide = false;
                }
            }
        }
    }

    /**
     * Non impl√©ment√©e
     */
    public void tourDeJeu() {

    }

    /**
     * V√©rifie si une cr√©ature peut int√©ragir avec un objet sur la carte, et le
     * supprime apr√®s l'interaction.
     *
     * @param creature Cr√©ature avec laquelle int√©ragir
     */
    public void interactionObjet(Creature creature) {
        int x = creature.getPos().getX();
        int y = creature.getPos().getY();
        if (mapObjets[x][y] != null) {
            mapObjets[x][y].interagir(creature);
        }
    }

    /**
     * Affiche la liste des objets pr√©sents sur la carte
     */
    public void afficheObjetMap() {
        System.out.println("OBJETS SUR LA CARTE :");
        for (int i = 0; i < ObjetsMap.size(); i++) {
            ObjetsMap.get(i).affiche();
        }
    }

    /**
     * Non impl√©ment√©e
     */
    public void afficheWorld() {

    }
}
